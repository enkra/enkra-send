// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/crypto.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.3.0';

  @override
  int get rustContentHash => -870217733;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_enkra_send',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<Uint8List> crateApiCryptoAeadCipherDecrypt(
      {required AeadCipher that,
      required List<int> ct,
      required List<int> aad});

  Future<Uint8List> crateApiCryptoAeadCipherEncrypt(
      {required AeadCipher that,
      required List<int> pt,
      required List<int> aad});

  Future<EncappedKey> crateApiCryptoSecureChannelCipherEncapKey(
      {required SecureChannelCipher that, required List<int> public});

  Future<SecureChannelCipher> crateApiCryptoSecureChannelCipherNewRandom();

  Future<Uint8List> crateApiCryptoSecureChannelCipherPublic(
      {required SecureChannelCipher that});

  Future<AeadCipher> crateApiCryptoSecureChannelCipherSharedSecret(
      {required SecureChannelCipher that, required List<int> encapsulatedKey});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EnkraSecureChannelKey;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EnkraSecureChannelKey;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_EnkraSecureChannelKeyPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexStdRng;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexStdRng;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MutexStdRngPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_XChaCha20Poly1305;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_XChaCha20Poly1305;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_XChaCha20Poly1305Ptr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<Uint8List> crateApiCryptoAeadCipherDecrypt(
      {required AeadCipher that,
      required List<int> ct,
      required List<int> aad}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_aead_cipher(that, serializer);
        sse_encode_list_prim_u_8_loose(ct, serializer);
        sse_encode_list_prim_u_8_loose(aad, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiCryptoAeadCipherDecryptConstMeta,
      argValues: [that, ct, aad],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCryptoAeadCipherDecryptConstMeta =>
      const TaskConstMeta(
        debugName: "aead_cipher_decrypt",
        argNames: ["that", "ct", "aad"],
      );

  @override
  Future<Uint8List> crateApiCryptoAeadCipherEncrypt(
      {required AeadCipher that,
      required List<int> pt,
      required List<int> aad}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_aead_cipher(that, serializer);
        sse_encode_list_prim_u_8_loose(pt, serializer);
        sse_encode_list_prim_u_8_loose(aad, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiCryptoAeadCipherEncryptConstMeta,
      argValues: [that, pt, aad],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCryptoAeadCipherEncryptConstMeta =>
      const TaskConstMeta(
        debugName: "aead_cipher_encrypt",
        argNames: ["that", "pt", "aad"],
      );

  @override
  Future<EncappedKey> crateApiCryptoSecureChannelCipherEncapKey(
      {required SecureChannelCipher that, required List<int> public}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_secure_channel_cipher(that, serializer);
        sse_encode_list_prim_u_8_loose(public, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_encapped_key,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiCryptoSecureChannelCipherEncapKeyConstMeta,
      argValues: [that, public],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCryptoSecureChannelCipherEncapKeyConstMeta =>
      const TaskConstMeta(
        debugName: "secure_channel_cipher_encap_key",
        argNames: ["that", "public"],
      );

  @override
  Future<SecureChannelCipher> crateApiCryptoSecureChannelCipherNewRandom() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_secure_channel_cipher,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCryptoSecureChannelCipherNewRandomConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCryptoSecureChannelCipherNewRandomConstMeta =>
      const TaskConstMeta(
        debugName: "secure_channel_cipher_new_random",
        argNames: [],
      );

  @override
  Future<Uint8List> crateApiCryptoSecureChannelCipherPublic(
      {required SecureChannelCipher that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_secure_channel_cipher(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCryptoSecureChannelCipherPublicConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCryptoSecureChannelCipherPublicConstMeta =>
      const TaskConstMeta(
        debugName: "secure_channel_cipher_public",
        argNames: ["that"],
      );

  @override
  Future<AeadCipher> crateApiCryptoSecureChannelCipherSharedSecret(
      {required SecureChannelCipher that, required List<int> encapsulatedKey}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_secure_channel_cipher(that, serializer);
        sse_encode_list_prim_u_8_loose(encapsulatedKey, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_aead_cipher,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiCryptoSecureChannelCipherSharedSecretConstMeta,
      argValues: [that, encapsulatedKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCryptoSecureChannelCipherSharedSecretConstMeta =>
      const TaskConstMeta(
        debugName: "secure_channel_cipher_shared_secret",
        argNames: ["that", "encapsulatedKey"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EnkraSecureChannelKey =>
          wire.rust_arc_increment_strong_count_RustOpaque_EnkraSecureChannelKey;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EnkraSecureChannelKey =>
          wire.rust_arc_decrement_strong_count_RustOpaque_EnkraSecureChannelKey;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexStdRng =>
          wire.rust_arc_increment_strong_count_RustOpaque_MutexStdRng;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexStdRng =>
          wire.rust_arc_decrement_strong_count_RustOpaque_MutexStdRng;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_XChaCha20Poly1305 =>
          wire.rust_arc_increment_strong_count_RustOpaque_XChaCha20Poly1305;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_XChaCha20Poly1305 =>
          wire.rust_arc_decrement_strong_count_RustOpaque_XChaCha20Poly1305;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  EnkraSecureChannelKey dco_decode_RustOpaque_EnkraSecureChannelKey(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnkraSecureChannelKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MutexStdRng dco_decode_RustOpaque_MutexStdRng(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MutexStdRngImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  XChaCha20Poly1305 dco_decode_RustOpaque_XChaCha20Poly1305(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return XChaCha20Poly1305Impl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  AeadCipher dco_decode_aead_cipher(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return AeadCipher(
      inner: dco_decode_RustOpaque_XChaCha20Poly1305(arr[0]),
    );
  }

  @protected
  AeadCipher dco_decode_box_autoadd_aead_cipher(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_aead_cipher(raw);
  }

  @protected
  SecureChannelCipher dco_decode_box_autoadd_secure_channel_cipher(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_secure_channel_cipher(raw);
  }

  @protected
  EncappedKey dco_decode_encapped_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return EncappedKey(
      encapsulatedKey: dco_decode_list_prim_u_8_strict(arr[0]),
      sharedSecret: dco_decode_aead_cipher(arr[1]),
    );
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  SecureChannelCipher dco_decode_secure_channel_cipher(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SecureChannelCipher(
      key: dco_decode_RustOpaque_EnkraSecureChannelKey(arr[0]),
      csprng: dco_decode_RustOpaque_MutexStdRng(arr[1]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  EnkraSecureChannelKey sse_decode_RustOpaque_EnkraSecureChannelKey(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EnkraSecureChannelKeyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MutexStdRng sse_decode_RustOpaque_MutexStdRng(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MutexStdRngImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  XChaCha20Poly1305 sse_decode_RustOpaque_XChaCha20Poly1305(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return XChaCha20Poly1305Impl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  AeadCipher sse_decode_aead_cipher(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_inner = sse_decode_RustOpaque_XChaCha20Poly1305(deserializer);
    return AeadCipher(inner: var_inner);
  }

  @protected
  AeadCipher sse_decode_box_autoadd_aead_cipher(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_aead_cipher(deserializer));
  }

  @protected
  SecureChannelCipher sse_decode_box_autoadd_secure_channel_cipher(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_secure_channel_cipher(deserializer));
  }

  @protected
  EncappedKey sse_decode_encapped_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_encapsulatedKey = sse_decode_list_prim_u_8_strict(deserializer);
    var var_sharedSecret = sse_decode_aead_cipher(deserializer);
    return EncappedKey(
        encapsulatedKey: var_encapsulatedKey, sharedSecret: var_sharedSecret);
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  SecureChannelCipher sse_decode_secure_channel_cipher(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_RustOpaque_EnkraSecureChannelKey(deserializer);
    var var_csprng = sse_decode_RustOpaque_MutexStdRng(deserializer);
    return SecureChannelCipher(key: var_key, csprng: var_csprng);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_RustOpaque_EnkraSecureChannelKey(
      EnkraSecureChannelKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EnkraSecureChannelKeyImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_MutexStdRng(
      MutexStdRng self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MutexStdRngImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_XChaCha20Poly1305(
      XChaCha20Poly1305 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as XChaCha20Poly1305Impl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_aead_cipher(AeadCipher self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_XChaCha20Poly1305(self.inner, serializer);
  }

  @protected
  void sse_encode_box_autoadd_aead_cipher(
      AeadCipher self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_aead_cipher(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_secure_channel_cipher(
      SecureChannelCipher self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_secure_channel_cipher(self, serializer);
  }

  @protected
  void sse_encode_encapped_key(EncappedKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.encapsulatedKey, serializer);
    sse_encode_aead_cipher(self.sharedSecret, serializer);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_secure_channel_cipher(
      SecureChannelCipher self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_EnkraSecureChannelKey(self.key, serializer);
    sse_encode_RustOpaque_MutexStdRng(self.csprng, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}

@sealed
class EnkraSecureChannelKeyImpl extends RustOpaque
    implements EnkraSecureChannelKey {
  // Not to be used by end users
  EnkraSecureChannelKeyImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EnkraSecureChannelKeyImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_EnkraSecureChannelKey,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_EnkraSecureChannelKey,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_EnkraSecureChannelKeyPtr,
  );
}

@sealed
class MutexStdRngImpl extends RustOpaque implements MutexStdRng {
  // Not to be used by end users
  MutexStdRngImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MutexStdRngImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MutexStdRng,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MutexStdRng,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MutexStdRngPtr,
  );
}

@sealed
class XChaCha20Poly1305Impl extends RustOpaque implements XChaCha20Poly1305 {
  // Not to be used by end users
  XChaCha20Poly1305Impl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  XChaCha20Poly1305Impl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_XChaCha20Poly1305,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_XChaCha20Poly1305,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_XChaCha20Poly1305Ptr,
  );
}
