--- build/web/flutter_service_worker.js	2024-08-31 05:49:58.287777837 +0800
+++ flutter_service_worker.js	2024-08-31 05:52:36.031529866 +0800
@@ -43,22 +43,6 @@
 "pkg/package.json": "dd10938d25b9934abe687fb3ebde2c47"};
 // The application shell files that are downloaded before a service worker can
 // start.
-const CORE = ["main.dart.js",
-"index.html",
-"flutter_bootstrap.js",
-"assets/AssetManifest.bin.json",
-"assets/FontManifest.json"];
-
-// During install, the TEMP cache is populated with the application shell files.
-self.addEventListener("install", (event) => {
-  self.skipWaiting();
-  return event.waitUntil(
-    caches.open(TEMP).then((cache) => {
-      return cache.addAll(
-        CORE.map((value) => new Request(value, {'cache': 'reload'})));
-    })
-  );
-});
 // During activate, the cache is populated with the temp files downloaded in
 // install. If this service worker is upgrading from one with a saved
 // MANIFEST, then use this to retain unchanged resource files.
@@ -119,6 +103,7 @@
     }
   }());
 });
+var IN_PROCESSING_REQUESTS = {};
 // The fetch handler redirects requests for RESOURCE files to the service
 // worker cache.
 self.addEventListener("fetch", (event) => {
@@ -148,10 +133,24 @@
       return cache.match(event.request).then((response) => {
         // Either respond with the cached resource, or perform a fetch and
         // lazily populate the cache only if the resource was successfully fetched.
-        return response || fetch(event.request).then((response) => {
+
+        if (response) {
+          return response;
+        }
+
+        if (IN_PROCESSING_REQUESTS[key]) {
+          return IN_PROCESSING_REQUESTS[key].clone();
+        }
+
+        return fetch(event.request).then((response) => {
           if (response && Boolean(response.ok)) {
-            cache.put(event.request, response.clone());
+
+            cache.put(event.request, response.clone())
+                .then(() => delete IN_PROCESSING_REQUESTS[key]);
           }
+
+          IN_PROCESSING_REQUESTS[key] = response.clone();
+
           return response;
         });
       })
